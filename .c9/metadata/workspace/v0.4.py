{"changed":true,"filter":false,"title":"v0.4.py","tooltip":"/v0.4.py","value":"'''\nCreated on Aug 5, 2014\n\n@author: Yves.Rosius\n'''\nimport os\n\nwith open(\"inventory.txt\", \"r\") as inventory_file:\n    inventory = eval(inventory_file.read())\n\n\ndef splash_screen():\n    \"\"\"ASCII art fun\"\"\"\n    print \" _    _                                   _   _                  \"\n    print \"| |  | |                                 | | | |                 \"\n    print \"| |  | | ___  __ _ _ __    __ _ _ __   __| | | |_ ___  __ _ _ __ \"\n    print \"| |/\\| |/ _ \\/ _` | '__|  / _` | '_ \\ / _` | | __/ _ \\/ _` | '__|\"\n    print \"\\  /\\  /  __/ (_| | |    | (_| | | | | (_| | | ||  __/ (_| | |   \"\n    print \" \\/  \\/ \\___|\\__,_|_|     \\__,_|_| |_|\\__,_|  \\__\\___|\\__,_|_|   \\n\"\n\n\ndef clear_screen():\n    \"\"\"Clears console.\"\"\"\n    os.system('cls' if os.name == 'nt' else 'clear')\n\n\ndef menu():\n    \"\"\"Start menu for user\"\"\"\n    # List of tuples. (function name, description for user, keyword arguments)\n    menu_list = [(view_parts, \"View all parts.\", {'equipped': False}),\n                 (view_parts, \"View all equipped parts.\", {'equipped': True}),\n                 (add_part, \"Add a part.\", {}),\n                 (remove_part, \"Remove a part.\", {}),\n                 (edit_part, \"Edit a part.\", {}),\n                 (equip_part, \"Equip a part.\", {}),\n                 (add_ride, \"Add a ride.\", {})]\n\n    clear_screen()\n    for description in menu_list:\n        print menu_list.index(description), description[1]\n\n    choice = raw_input(\"\\nPlease make a choice.\")\n    clear_screen()\n    try:\n        function, description, kwargs = menu_list[int(choice)]\n        function(**kwargs)\n    except (ValueError, IndexError):\n        print \"Please select correct number to make a choice.\"\n\n\ndef view_parts(equipped):\n    \"\"\"View parts in your inventory. Display equipped or all parts.\"\"\"\n    clear_screen()\n    for part_type in inventory:\n        print part_type\n        for part_name in inventory[part_type]:\n            if inventory[part_type][part_name][3] == True or equipped == False:\n                print \"\\t\", part_name\n                print \"\\t\\t\", inventory[part_type][part_name]\n\n\ndef choose_part(type_or_name, choice_part_type):\n    \"\"\"Return value chosen by user.\"\"\"\n    clear_screen()\n    if type_or_name == \"type\":\n        temp_list = inventory.keys()\n    elif type_or_name == \"name\":\n        temp_list = inventory[choice_part_type].keys()\n\n    for index, item in enumerate(temp_list):\n        print index, item\n\n    choice = raw_input(\"\\nPlease make a choice.\")\n    while type(choice) != int:\n        try:\n            choice = int(choice)\n        except ValueError:\n            choice = raw_input(\"Please select correct number to make a choice.\")\n    return temp_list[choice]\n\n\ndef add_part():\n    \"\"\"Add a new part to your inventory.\"\"\"\n    choice_part_type = choose_part(\"type\", 0)\n\n    choice_part_name = raw_input(\"What is the name of the part?\")\n    weight = raw_input(\"What is the weight of the part?\")\n    price = raw_input(\"What is the price of the part?\")\n\n    inventory[str(choice_part_type)] = {str(choice_part_name) : [weight,\n                                                                 price,\n                                                                 0,\n                                                                 False]}\n\n\ndef remove_part():\n    \"\"\"Remove a part from your inventory.\"\"\"\n    choice_part_type = choose_part(\"type\", 0)\n    if inventory[choice_part_type] == {}:\n        clear_screen()\n        print \"There are no items of this type.\"\n    else:\n        choice_part_name = choose_part(\"name\", choice_part_type)\n\n        del inventory[choice_part_type][choice_part_name]\n\n\ndef edit_part():\n    \"\"\"Change properties of a specific part.\"\"\"\n    choice_part_type = choose_part(\"type\", 0)\n    if inventory[choice_part_type] == {}:\n        clear_screen()\n        print \"There are no items of this type.\"\n    else:\n        choice_part_name = choose_part(\"name\", choice_part_type)\n        clear_screen()\n        print \"0 weight\"\n        print \"1 price\"\n        edit_choice = int(raw_input(\"What property do you want to edit?\"))\n        if edit_choice == 0 or edit_choice == 1:\n            new_value = raw_input(\"Please give the new value for the property.\")\n            inventory[choice_part_type][choice_part_name][edit_choice] = new_value\n        else:\n            print \"Please select correct number to make a choice.\"\n            edit_part()\n\n\ndef equip_part():\n    \"\"\"Equip one part, unequip all other parts of that part type.\"\"\"\n    choice_part_type = choose_part(\"type\", 0)\n    if inventory[choice_part_type] == {}:\n        clear_screen()\n        print \"There are no items of this type.\"\n    else:\n        choice_part_name = choose_part(\"name\", choice_part_type)\n\n        clear_screen()\n        for part_name in inventory[choice_part_type]:\n            inventory[choice_part_type][part_name][3] = False\n\n        inventory[choice_part_type][choice_part_name][3] = True\n        print \"Your part has been equipped.\"\n\n\ndef add_ride():\n    \"\"\"Adds miles to properties of all equipped parts.\"\"\"\n    clear_screen()\n    distance = int(raw_input(\"How many miles do you want to add?\"))\n\n    for part_type in inventory:\n        for part_name in inventory[part_type]:\n            if inventory[part_type][part_name][3]:\n                inventory[part_type][part_name][2] += distance\n\n\nsplash_screen()\nwhile 1:\n    proceed = raw_input(\"\\nPress any key to continue. Q to quit.\")\n    if proceed.lower() == \"q\":\n        clear_screen()\n        with open(\"inventory.txt\", \"w\") as inventory_file:\n            inventory_file.write(str(inventory))\n            print \"Bye\"\n            exit()\n    else:\n        menu()\n","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":177,"column":0}},"nl":"\n","lines":["'''","Created on Jul 25, 2014","","@author: Yves.Rosius","'''","import os","","with open(\"inventory.txt\", \"r\") as inventory_file:","    inventory = eval(inventory_file.read())","","","def splash_screen():","    \"\"\"ASCII art fun\"\"\"","    print \" _    _                                   _   _                  \"","    print \"| |  | |                                 | | | |                 \"","    print \"| |  | | ___  __ _ _ __    __ _ _ __   __| | | |_ ___  __ _ _ __ \"","    print \"| |/\\| |/ _ \\/ _` | '__|  / _` | '_ \\ / _` | | __/ _ \\/ _` | '__|\"","    print \"\\  /\\  /  __/ (_| | |    | (_| | | | | (_| | | ||  __/ (_| | |   \"","    print \" \\/  \\/ \\___|\\__,_|_|     \\__,_|_| |_|\\__,_|  \\__\\___|\\__,_|_|   \\n\"","","","def clear_screen():","    \"\"\"Clears console.\"\"\"","    os.system('cls' if os.name == 'nt' else 'clear')","","","def menu():","    \"\"\"Start menu for user\"\"\"","    # List of tuples. (function name, description for user)","    menu_list = [(view_all_parts, \"View all parts.\"),","                 (view_equipped_parts, \"View all equipped parts.\"),","                 (add_part, \"Add a part.\"),","                 (remove_part, \"Remove a part.\"),","                 (edit_part, \"Edit a part.\"),","                 (equip_part, \"Equip a part.\"),","                 (add_ride, \"Add a ride.\")]","","    for description in menu_list:","        print menu_list.index(description), description[1]","","    choice = raw_input(\"\\nPlease make a choice.\")","    clear_screen()","    try:","        menu_list[int(choice)][0]()","    except (ValueError, IndexError):","        print \"Please select correct number to make a choice.\"","","","def view_all_parts():","    \"\"\"View all parts in your inventory.\"\"\"","    for part_type in inventory:","        print part_type","        for part_name in inventory[part_type]:","            print \"\\t\", part_name","            print \"\\t\\t\", inventory[part_type][part_name]","","","def view_equipped_parts():","    \"\"\"View all parts that are currently equipped.\"\"\"","    for part_type in inventory:","        for part_name in inventory[part_type]:","            if inventory[part_type][part_name][3]:","                print part_type","                print \"\\t\", part_name","                print \"\\t\\t\", inventory[part_type][part_name]","","","def choose_part(type_or_name, choice_part_type):","    if type_or_name == \"type\":","        temp_list = inventory.keys()","    elif type_or_name == \"name\":","        temp_list = inventory[choice_part_type].keys()","","    for index, item in enumerate(temp_list):","        print index, item","","    choice = raw_input(\"Please make a choice.\")","    try:","        choice = temp_list[int(choice)]","    except (ValueError, IndexError):","        clear_screen()","        print \"Please select correct number to make a choice.\"","        choose_part()","    return choice","","","def add_part():","    \"\"\"Add a new part to your inventory.\"\"\"","    choice_part_type = choose_part(\"type\", 0)","","    choice_part_name = raw_input(\"What is the name of the part?\")","    weight = raw_input(\"What is the weight of the part?\")","    price = raw_input(\"What is the price of the part?\")","    mileage = 0","    equipped = False","","    inventory[str(choice_part_type)] = {str(choice_part_name) : [str(weight),","                                                                 str(price),","                                                                 mileage,","                                                                 equipped]}","","","def remove_part():","    \"\"\"Remove a part from your inventory.\"\"\"","    choice_part_type = choose_part(\"type\", 0)","    if inventory[choice_part_type] == {}:","        print \"There are no items of this type.\"","    else:","        choice_part_name = choose_part(\"name\", choice_part_type)","    ","        del inventory[choice_part_type][choice_part_name]","","","def edit_part():","    \"\"\"Change properties of a specific part.\"\"\"","    choice_part_type = choose_part(\"type\", 0)","    if inventory[choice_part_type] == {}:","        print \"There are no items of this type.\"","    else:","        choice_part_name = choose_part(\"name\", choice_part_type)","    ","        clear_screen()","        print \"0 weight\\n\\","               1 price\\n\\","               2 mileage\\n\\","               3 equipped\"","        edit_choice = int(raw_input(\"What property do you want to edit?\"))","        if edit_choice == 2 or edit_choice == 3:","            clear_screen()","            print \"\"\"This property cannot be edited here.","                  Please use the appropriate functions in menu.\"\"\"","        elif edit_choice == 0 or edit_choice == 1:","            new_value = raw_input(\"Please give the new value for the property.\")","    ","            inventory[choice_part_type][choice_part_name][edit_choice] = new_value","        else:","            print \"Please select correct number to make a choice.\"","            edit_part()","","","def equip_part():","    \"\"\"Equip one part, unequip all other parts of that part type.\"\"\"","    choice_part_type = choose_part(\"type\", 0)","    if inventory[choice_part_type] == {}:","        print \"There are no items of this type.\"","    else:","        choice_part_name = choose_part(\"name\", choice_part_type)","    ","        clear_screen()","        for part_name in inventory[choice_part_type]:","            inventory[choice_part_type][part_name][3] = False","    ","        inventory[choice_part_type][choice_part_name][3] = True","        print \"Your part has been equipped.\"","","","def add_ride():","    \"\"\"Adds miles to properties of all equipped parts.\"\"\"","    distance = int(raw_input(\"How many miles do you want to add?\"))","","    for part_type in inventory:","        for part_name in inventory[part_type]:","            if inventory[part_type][part_name][3]:","                inventory[part_type][part_name][2] += distance","","","splash_screen()","while 1:","    proceed = raw_input(\"\\nPress any key to continue. Q to quit.\")","    if proceed.lower() == \"q\":","        clear_screen()","        with open(\"inventory.txt\", \"w\") as inventory_file:","            inventory_file.write(str(inventory))","            print \"Bye\"","            exit()","    else:","        menu()"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":3}},"text":"'''"},{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":166,"column":0}},"lines":["Created on Aug 5, 2014","","@author: Yves.Rosius","'''","import os","","with open(\"inventory.txt\", \"r\") as inventory_file:","    inventory = eval(inventory_file.read())","","","def splash_screen():","    \"\"\"ASCII art fun\"\"\"","    print \" _    _                                   _   _                  \"","    print \"| |  | |                                 | | | |                 \"","    print \"| |  | | ___  __ _ _ __    __ _ _ __   __| | | |_ ___  __ _ _ __ \"","    print \"| |/\\| |/ _ \\/ _` | '__|  / _` | '_ \\ / _` | | __/ _ \\/ _` | '__|\"","    print \"\\  /\\  /  __/ (_| | |    | (_| | | | | (_| | | ||  __/ (_| | |   \"","    print \" \\/  \\/ \\___|\\__,_|_|     \\__,_|_| |_|\\__,_|  \\__\\___|\\__,_|_|   \\n\"","","","def clear_screen():","    \"\"\"Clears console.\"\"\"","    os.system('cls' if os.name == 'nt' else 'clear')","","","def menu():","    \"\"\"Start menu for user\"\"\"","    # List of tuples. (function name, description for user, keyword arguments)","    menu_list = [(view_parts, \"View all parts.\", {'equipped': False}),","                 (view_parts, \"View all equipped parts.\", {'equipped': True}),","                 (add_part, \"Add a part.\", {}),","                 (remove_part, \"Remove a part.\", {}),","                 (edit_part, \"Edit a part.\", {}),","                 (equip_part, \"Equip a part.\", {}),","                 (add_ride, \"Add a ride.\", {})]","","    clear_screen()","    for description in menu_list:","        print menu_list.index(description), description[1]","","    choice = raw_input(\"\\nPlease make a choice.\")","    clear_screen()","    try:","        function, description, kwargs = menu_list[int(choice)]","        function(**kwargs)","    except (ValueError, IndexError):","        print \"Please select correct number to make a choice.\"","","","def view_parts(equipped):","    \"\"\"View parts in your inventory. Display equipped or all parts.\"\"\"","    clear_screen()","    for part_type in inventory:","        print part_type","        for part_name in inventory[part_type]:","            if inventory[part_type][part_name][3] == True or equipped == False:","                print \"\\t\", part_name","                print \"\\t\\t\", inventory[part_type][part_name]","","","def choose_part(type_or_name, choice_part_type):","    \"\"\"Return value chosen by user.\"\"\"","    clear_screen()","    if type_or_name == \"type\":","        temp_list = inventory.keys()","    elif type_or_name == \"name\":","        temp_list = inventory[choice_part_type].keys()","","    for index, item in enumerate(temp_list):","        print index, item","","    choice = raw_input(\"\\nPlease make a choice.\")","    while type(choice) != int:","        try:","            choice = int(choice)","        except ValueError:","            choice = raw_input(\"Please select correct number to make a choice.\")","    return temp_list[choice]","","","def add_part():","    \"\"\"Add a new part to your inventory.\"\"\"","    choice_part_type = choose_part(\"type\", 0)","","    choice_part_name = raw_input(\"What is the name of the part?\")","    weight = raw_input(\"What is the weight of the part?\")","    price = raw_input(\"What is the price of the part?\")","","    inventory[str(choice_part_type)] = {str(choice_part_name) : [weight,","                                                                 price,","                                                                 0,","                                                                 False]}","","","def remove_part():","    \"\"\"Remove a part from your inventory.\"\"\"","    choice_part_type = choose_part(\"type\", 0)","    if inventory[choice_part_type] == {}:","        clear_screen()","        print \"There are no items of this type.\"","    else:","        choice_part_name = choose_part(\"name\", choice_part_type)","","        del inventory[choice_part_type][choice_part_name]","","","def edit_part():","    \"\"\"Change properties of a specific part.\"\"\"","    choice_part_type = choose_part(\"type\", 0)","    if inventory[choice_part_type] == {}:","        clear_screen()","        print \"There are no items of this type.\"","    else:","        choice_part_name = choose_part(\"name\", choice_part_type)","        clear_screen()","        print \"0 weight\"","        print \"1 price\"","        edit_choice = int(raw_input(\"What property do you want to edit?\"))","        if edit_choice == 0 or edit_choice == 1:","            new_value = raw_input(\"Please give the new value for the property.\")","            inventory[choice_part_type][choice_part_name][edit_choice] = new_value","        else:","            print \"Please select correct number to make a choice.\"","            edit_part()","","","def equip_part():","    \"\"\"Equip one part, unequip all other parts of that part type.\"\"\"","    choice_part_type = choose_part(\"type\", 0)","    if inventory[choice_part_type] == {}:","        clear_screen()","        print \"There are no items of this type.\"","    else:","        choice_part_name = choose_part(\"name\", choice_part_type)","","        clear_screen()","        for part_name in inventory[choice_part_type]:","            inventory[choice_part_type][part_name][3] = False","","        inventory[choice_part_type][choice_part_name][3] = True","        print \"Your part has been equipped.\"","","","def add_ride():","    \"\"\"Adds miles to properties of all equipped parts.\"\"\"","    clear_screen()","    distance = int(raw_input(\"How many miles do you want to add?\"))","","    for part_type in inventory:","        for part_name in inventory[part_type]:","            if inventory[part_type][part_name][3]:","                inventory[part_type][part_name][2] += distance","","","splash_screen()","while 1:","    proceed = raw_input(\"\\nPress any key to continue. Q to quit.\")","    if proceed.lower() == \"q\":","        clear_screen()","        with open(\"inventory.txt\", \"w\") as inventory_file:","            inventory_file.write(str(inventory))","            print \"Bye\"","            exit()","    else:","        menu()"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":166,"column":0},"end":{"row":166,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1407229973216}